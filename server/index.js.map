{"version":3,"sources":["../../src/server/index.js"],"names":["MONGO_URI","process","env","MongoDBStoreWithSession","session","mongoose","Promise","global","options","reconnectTries","Number","MAX_VALUE","reconnectInterval","connect","connection","once","console","log","on","error","store","mongooseConnection","ttl","app","disable","use","bodyParser","urlencoded","extended","origin","methods","preflightContinue","optionsSuccessStatus","filter","shouldCompress","req","res","headers","compression","express","static","path","join","__dirname","get","sendFile","server","ApolloServer","typeDefs","resolvers","context","models","Employee","Survey","Company","Result","User","File","url","genid","uuid","v4","name","secret","resave","saveUninitialized","cookie","httpOnly","secure","NODE_ENV","maxAge","applyMiddleware","CompanyModel","EmployeeModel"],"mappings":"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","file":"index.js","sourcesContent":["import { ApolloServer } from 'apollo-server-express';\r\nimport compression from 'compression';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport mongoose from 'mongoose';\r\nimport cors from 'cors';\r\nimport favicon from 'serve-favicon';\r\nimport path from 'path';\r\nimport session from 'express-session';\r\nimport uuid from 'uuid';\r\nimport { redirectToHTTPS } from 'express-http-to-https';\r\nimport MongoStore from 'connect-mongo';\r\nimport { Employee, Survey, Company, Result, User, File } from './models';\r\nimport resolvers from './resolvers';\r\nimport typeDefs from './schema';\r\nconst { MONGO_URI } = process.env;\r\nimport schedule from '../scheduler';\r\n\r\nconst MongoDBStoreWithSession = MongoStore(session);\r\nmongoose.Promise = global.Promise;\r\nconst options = {\r\n  reconnectTries: Number.MAX_VALUE, // Never stop trying to reconnect\r\n  reconnectInterval: 500, // Reconnect every 500ms\r\n};\r\nmongoose.connect(MONGO_URI, options);\r\n\r\nmongoose.connection\r\n  .once('open', () => console.log('Connected to MongoLab instance')) // eslint-disable-line no-console\r\n  .on('error', error => console.log('Error connecting to MongoLab:', error)); // eslint-disable-line no-console\r\n\r\nconst store = new MongoDBStoreWithSession({\r\n  mongooseConnection: mongoose.connection,\r\n  ttl: 7 * 24 * 60 * 60, // 7 days\r\n});\r\n\r\nconst app = express();\r\n\r\napp.disable('x-powered-by');\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(\r\n  cors({\r\n    origin: '*',\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    preflightContinue: false,\r\n    optionsSuccessStatus: 204,\r\n  })\r\n);\r\n\r\napp.use(compression({ filter: shouldCompress }));\r\n\r\nfunction shouldCompress(req, res) {\r\n  if (req.headers['x-no-compression']) {\r\n    // don't compress responses with this request header\r\n    return false;\r\n  }\r\n\r\n  // fallback to standard filter function\r\n  return compression.filter(req, res);\r\n}\r\n\r\napp.use(express.static(path.join(__dirname, '../../client/build')));\r\napp.use(favicon(path.join(__dirname, 'favicon.ico')));\r\napp.use(redirectToHTTPS([/localhost:(\\d{4})/], [/\\/insecure/]));\r\napp.get('/*', function(req, res) {\r\n  res.sendFile(path.join(__dirname, '../../client/build', 'index.html'));\r\n});\r\n\r\nconst server = new ApolloServer({\r\n  typeDefs,\r\n  resolvers,\r\n  context: async ({ req }) => {\r\n    return {\r\n      models: {\r\n        Employee,\r\n        Survey,\r\n        Company,\r\n        Result,\r\n        User,\r\n        File,\r\n      },\r\n      req,\r\n      session: req.session,\r\n      url: req.url,\r\n    };\r\n  },\r\n});\r\n\r\napp.use(\r\n  session({\r\n    genid: () => {\r\n      return uuid.v4();\r\n    },\r\n    store,\r\n    name: 'qid',\r\n    secret: 'SESSION_SECRET',\r\n    resave: false,\r\n    saveUninitialized: false,\r\n    cookie: {\r\n      httpOnly: false,\r\n      secure: process.env.NODE_ENV === 'production',\r\n      maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days\r\n    },\r\n  })\r\n);\r\n\r\nserver.applyMiddleware({ app });\r\nschedule({ CompanyModel: Company, EmployeeModel: Employee });\r\n\r\nexport default app;\r\n"]}