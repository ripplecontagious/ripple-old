{"version":3,"sources":["../../../src/server/models/index.js"],"names":["mongoose","require","bcrypt","Schema","Company","model","schedule","String","companyName","groups","UserSchema","_id","resetId","confirmed","Boolean","forgotPasswordLocked","password","email","pre","save","next","user","isModified","genSalt","err","salt","hash","methods","comparePassword","candidatePassword","cb","compare","isMatch","User","Employee","lastReminder","mobileId","firstName","lastName","mobile","manager","groupMembership","dashboardAccess","surveyName","surveyOwed","firstTime","isDeleted","Survey","color","directionStandard","introPage1","introPage2","subHeading","p1","p2","p3","p4","p5","p6","start","end","Result","participant","participantName","group","date","Number","FileSchema","logo","path","filename","mimetype","encoding","Image"],"mappings":"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","file":"index.js","sourcesContent":["const mongoose = require('mongoose');\r\nconst bcrypt = require('bcrypt-nodejs');\r\nconst Schema = mongoose.Schema;\r\n\r\nexport const Company = mongoose.model('Company', {\r\n  schedule: String,\r\n  companyName: String,\r\n  groups: [String],\r\n});\r\n\r\nconst UserSchema = new Schema({\r\n  _id: String,\r\n  resetId: String,\r\n  confirmed: Boolean,\r\n  forgotPasswordLocked: Boolean,\r\n  password: String,\r\n  email: String,\r\n});\r\n\r\nUserSchema.pre('save', function save(next) {\r\n  const user = this;\r\n  if (!user.isModified('password')) {\r\n    return next();\r\n  }\r\n  bcrypt.genSalt(10, (err, salt) => {\r\n    if (err) {\r\n      return next(err);\r\n    }\r\n    bcrypt.hash(user.password, salt, null, (err, hash) => {\r\n      if (err) {\r\n        return next(err);\r\n      }\r\n      user.password = hash;\r\n      next();\r\n    });\r\n  });\r\n});\r\n\r\nUserSchema.methods.comparePassword = function comparePassword(\r\n  candidatePassword,\r\n  cb\r\n) {\r\n  bcrypt.compare(candidatePassword, this.password, (err, isMatch) => {\r\n    cb(err, isMatch);\r\n  });\r\n};\r\n\r\nexport const User = mongoose.model('user', UserSchema);\r\n\r\nexport const Employee = mongoose.model('Employee', {\r\n  _id: String,\r\n  lastReminder: String,\r\n  mobileId: String,\r\n  companyName: String,\r\n  firstName: String,\r\n  lastName: String,\r\n  email: String,\r\n  mobile: String,\r\n  manager: String,\r\n  groupMembership: [String],\r\n  dashboardAccess: Boolean,\r\n  surveyName: String,\r\n  surveyOwed: Boolean,\r\n  firstTime: Boolean,\r\n  isDeleted: Boolean,\r\n});\r\n\r\nexport const Survey = mongoose.model('Survey', {\r\n  color: Boolean,\r\n  directionStandard: Boolean,\r\n  surveyName: String,\r\n  companyName: String,\r\n  introPage1: String,\r\n  introPage2: String,\r\n  subHeading: {\r\n    p1: String,\r\n    p2: String,\r\n    p3: String,\r\n    p4: String,\r\n    p5: String,\r\n    p6: String,\r\n  },\r\n  start: {\r\n    p1: String,\r\n    p2: String,\r\n    p3: String,\r\n    p4: String,\r\n    p5: String,\r\n    p6: String,\r\n  },\r\n  end: {\r\n    p1: String,\r\n    p2: String,\r\n    p3: String,\r\n    p4: String,\r\n    p5: String,\r\n    p6: String,\r\n  },\r\n});\r\n\r\nexport const Result = mongoose.model('Results', {\r\n  email: String,\r\n  participant: String,\r\n  participantName: String,\r\n  manager: String,\r\n  group: String,\r\n  companyName: String,\r\n  surveyName: String,\r\n  date: String,\r\n  p1: Number,\r\n  p2: Number,\r\n  p3: Number,\r\n  p4: Number,\r\n  p5: Number,\r\n  p6: Number,\r\n});\r\n\r\nconst FileSchema = new Schema({\r\n  companyName: String,\r\n  logo: Boolean,\r\n  path: String,\r\n  filename: String,\r\n  mimetype: String,\r\n  encoding: String,\r\n});\r\nexport const Image = mongoose.model('File', FileSchema);\r\n"]}