{"version":3,"sources":["../../src/resolvers/index.js"],"names":["Upload","GraphQLUpload","Query","scheduleTest","getImages","_","companyName","models","File","images","find","exec","map","image","pathname","path","errors","getCompanies","__","Company","companies","getCompany","company","findOne","getParticipants","manager","Employee","Result","employees","twoWeeksAgo","Date","getTime","unfilteredResults","email","results","filter","r","Number","date","notTaken","employee","x","participant","length","getEmployeeById","id","findById","getEmployeeByMobileId","mobileId","getEmployees","getSurveys","Survey","surveys","getSurvey","surveyName","survey","getResults","getUser","User","exists","confirmed","forgotPasswordLocked","getLoggedIn","req","session","userId","loggedInUser","error","destroy","Mutation","imageUpload","logo","file","stream","filename","updated","findOneAndUpdate","newImage","save","uploadEmployeesFromCsv","filePath","data","require","success","insertMany","err","assert","equal","logout","signupWithoutConfirmation","password","userValidation","validate","abortEarly","_id","resetId","signup","url","uuid","v4","login","forgotPassword","user","valid","bcrypt","compare","createCompany","schedule","groups","editCompany","removeCompany","findOneAndRemove","createEmployee","args","firstTime","surveyOwed","editEmployee","findByIdAndUpdate","removeEmployee","employeeExists","findByIdAndRemove","userExists","createSurvey","added","editSurvey","query","removeSurvey","existed","assignSurvey","forEach","mobile","linkUrl","LINK_URL","employeeError","push","message","catch","then","sendTestMessage","res","JSON","stringify","sendReminder","lastReminder","String","sendReminders","limit","responses","reduce","arr","u","response","createResult","submitted","passwordReset","saltRounds","hashedPassword","hashSync","sentEmail"],"mappings":"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","file":"index.js","sourcesContent":["import assert from \"assert\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { userValidation, formatYupError } from \"../auth/validation\";\r\nimport uuid from \"uuid\";\r\nimport createError from \"../utils/createError\";\r\nimport { sendEmail } from \"../auth/sendEmail\";\r\nimport { storeFS } from \"../utils/imageUpload\";\r\nimport { GraphQLUpload } from \"../schema/GraphQLUpload\";\r\nimport csvUpload from \"../utils/csvUpload\";\r\nimport { sendSMS } from \"../utils/sendSMS\";\r\nimport { LINK_URL } from \"../constants\";\r\nimport {\r\n  addSchedule,\r\n  startSchedule,\r\n  stopSchedule,\r\n  destorySchedule,\r\n  testSchedule\r\n} from \"../../scheduler\";\r\n\r\nexport default {\r\n  Upload: GraphQLUpload,\r\n  Query: {\r\n    scheduleTest: async () => await testSchedule(),\r\n    getImages: async (_, { companyName }, { models: { File } }) => {\r\n      const images = await File.find({ companyName }).exec();\r\n      if (images) {\r\n        return images.map(image => ({ pathname: image.path }));\r\n      }\r\n      return { errors: createError(\"image\", \"images not found\") };\r\n    },\r\n    getCompanies: async (_, __, { models: { Company } }) => {\r\n      const companies = await Company.find().exec();\r\n      return companies[0] !== null\r\n        ? companies\r\n        : { errors: createError(\"company\", \"no companies found\") };\r\n    },\r\n    getCompany: async (_, { companyName }, { models: { Company } }) => {\r\n      const company = await Company.findOne({ companyName }).exec();\r\n      if (company === null) {\r\n        return { errors: createError(\"company\", \"company not found\") };\r\n      }\r\n      return company;\r\n    },\r\n    getParticipants: async (\r\n      _,\r\n      { manager, companyName },\r\n      { models: { Employee, Result } }\r\n    ) => {\r\n      const employees = await Employee.find({ manager, companyName }).exec();\r\n      const twoWeeksAgo = new Date().getTime() - 1000 * 60 * 60 * 24 * 14;\r\n      const unfilteredResults = await Result.find({ email: manager });\r\n      const results = unfilteredResults.filter(\r\n        r => Number(r.date) > twoWeeksAgo\r\n      );\r\n\r\n      const notTaken = employees.filter(\r\n        employee => !results.find(x => x.participant === employee.email)\r\n      );\r\n      if (notTaken.length > 0) {\r\n        return { employees: notTaken };\r\n      }\r\n      return { errors: createError(\"participants\", `no participants found`) };\r\n    },\r\n    getEmployeeById: async (_, { id }, { models: { Employee } }) => {\r\n      const employee = await Employee.findById(id).exec();\r\n      return employee\r\n        ? employee\r\n        : { errors: createError(\"id\", `employee doesn't exist`) };\r\n    },\r\n    getEmployeeByMobileId: async (\r\n      _,\r\n      { mobileId },\r\n      { models: { Employee } }\r\n    ) => {\r\n      const employee = await Employee.findOne({ mobileId }).exec();\r\n      return employee\r\n        ? employee\r\n        : {\r\n          errors: createError(\r\n            \"id\",\r\n            `session id expired, login or contact admin`\r\n          )\r\n        };\r\n    },\r\n    getEmployees: async (_, { companyName }, { models: { Employee } }) => {\r\n      const employees = await Employee.find({ companyName }).exec();\r\n      return employees.length > 0\r\n        ? { employees }\r\n        : { errors: createError(\"employees\", \"no employees found\") };\r\n    },\r\n    getSurveys: async (_, { companyName }, { models: { Survey } }) => {\r\n      const surveys = await Survey.find({ companyName }).exec();\r\n      return surveys.surveys\r\n        ? surveys\r\n        : { errors: createError(\"surveys\", \"no surveys found\") };\r\n    },\r\n    getSurvey: async (\r\n      _,\r\n      { companyName, surveyName },\r\n      { models: { Survey } }\r\n    ) => {\r\n      const survey = await Survey.findOne({ companyName, surveyName }).exec();\r\n      return survey\r\n        ? survey\r\n        : { errors: createError(\"surveys\", \"survey not found\") };\r\n    },\r\n    getResults: async (\r\n      _,\r\n      { companyName, email, manager, participant },\r\n      { models: { Result } }\r\n    ) => {\r\n      if (email) {\r\n        const results = await Result.find({ companyName, email }).exec();\r\n        return results.length > 0\r\n          ? { results }\r\n          : { errors: createError(\"results\", \"no results found\") };\r\n      }\r\n      if (manager) {\r\n        const results = await Result.find({ companyName, manager }).exec();\r\n        return results.length > 0\r\n          ? { results }\r\n          : { errors: createError(\"results\", \"no results found\") };\r\n      }\r\n      if (participant) {\r\n        const results = await Result.find({ companyName, participant }).exec();\r\n        return results.length > 0\r\n          ? { results }\r\n          : { errors: createError(\"results\", \"no results found\") };\r\n      } else {\r\n        const results = await Result.find({ companyName }).exec();\r\n        return results.length > 0\r\n          ? { results }\r\n          : { errors: createError(\"results\", \"no results found\") };\r\n      }\r\n    },\r\n    getUser: async (_, { id }, { models: { User } }) => {\r\n      const exists = await User.findById(id);\r\n      if (exists) {\r\n        return {\r\n          confirmed: exists.confirmed,\r\n          forgotPasswordLocked: exists.forgotPasswordLocked,\r\n          email: exists.email\r\n        };\r\n      }\r\n      return null;\r\n    },\r\n    getLoggedIn: async (_, __, { req, models: { Employee } }) => {\r\n      // checks session for logged in user\r\n      if (req.session.userId) {\r\n        const loggedInUser = await Employee.findById(req.session.userId).exec();\r\n        if (loggedInUser) {\r\n          return { loggedInUser };\r\n        }\r\n        delete req.session.userId;\r\n        const error = await req.session.destroy();\r\n        if (error) {\r\n          return {\r\n            errors: createError(\"login status\", \"contact administrator\")\r\n          };\r\n        }\r\n        return { errors: createError(\"login status\", \"refresh browser\") };\r\n      }\r\n      return { errors: createError(\"login status\", \"login required\") };\r\n    }\r\n  },\r\n  Mutation: {\r\n    imageUpload: async (\r\n      _,\r\n      { companyName, logo, file },\r\n      { models: { File } }\r\n    ) => {\r\n      const { stream, filename } = await file;\r\n      const { path } = await storeFS({ stream, filename });\r\n      const exists = await File.findOne({ companyName });\r\n      if (exists) {\r\n        const updated = await File.findOneAndUpdate(\r\n          { companyName, logo },\r\n          { filename, path }\r\n        ).exec();\r\n        if (!updated) {\r\n          return createError(\"image\", \"upload failed\");\r\n        }\r\n        return null;\r\n      }\r\n      const newImage = await new File({\r\n        companyName,\r\n        logo,\r\n        filename,\r\n        path\r\n      }).save();\r\n      if (!newImage) {\r\n        return createError(\"image\", \"upload failed\");\r\n      }\r\n      return null;\r\n    },\r\n    uploadEmployeesFromCsv: async (\r\n      _,\r\n      { companyName, file },\r\n      { models: { Employee } }\r\n    ) => {\r\n      const { stream } = await file;\r\n      try {\r\n        const { filePath } = await csvUpload({ stream, companyName });\r\n        const data = require(filePath);\r\n        const success = await Employee.insertMany(data, err =>\r\n          assert.equal(null, err)\r\n        ).exec();\r\n        if (!success) {\r\n          return createError(\"csv\", \"upload failed\");\r\n        }\r\n        return null;\r\n      } catch (error) {\r\n        return createError(\"csv\", \"upload failed\");\r\n      }\r\n    },\r\n    logout: async (_, __, { req }) => {\r\n      await req.session.destroy();\r\n      return null;\r\n    },\r\n    // signup users without sending confirmation email and assosciated confirmation login\r\n    // administrator only\r\n    signupWithoutConfirmation: async (\r\n      _,\r\n      { email, password },\r\n      { models: { User, Employee } }\r\n    ) => {\r\n      try {\r\n        await userValidation.validate(\r\n          { email, password },\r\n          { abortEarly: false }\r\n        );\r\n      } catch (error) {\r\n        return formatYupError(error);\r\n      }\r\n      const exists = await User.findOne({ email }).exec();\r\n      if (exists) {\r\n        return createError(\"email\", \"user already exists\");\r\n      }\r\n      try {\r\n        const employee = await Employee.findOne({ email }).exec();\r\n        await new User({\r\n          _id: employee._id,\r\n          resetId: \"\",\r\n          confirmed: true,\r\n          forgotPasswordLocked: false,\r\n          email,\r\n          password\r\n        }).save();\r\n      } catch (error) {\r\n        return createError(\r\n          \"employee\",\r\n          \"contact your administrator to arrange access\"\r\n        );\r\n      }\r\n      return null;\r\n    },\r\n    signup: async (\r\n      _,\r\n      { email, password },\r\n      { models: { User, Employee }, url }\r\n    ) => {\r\n      const resetId = uuid.v4();\r\n      try {\r\n        await userValidation.validate(\r\n          { email, password },\r\n          { abortEarly: false }\r\n        );\r\n      } catch (error) {\r\n        return { errors: formatYupError(error) };\r\n      }\r\n      try {\r\n        await User.findOne({ email }).exec();\r\n        return { errors: createError(\"email\", \"invalid credentials\") };\r\n      } catch (error) {\r\n        try {\r\n          const employee = await Employee.findOne({ email }).exec();\r\n          await new User({\r\n            _id: employee._id,\r\n            resetId,\r\n            confirmed: false,\r\n            forgotPasswordLocked: false,\r\n            email,\r\n            password\r\n          }).save();\r\n        } catch (error) {\r\n          return {\r\n            errors: createError(\r\n              \"employee\",\r\n              \"contact your administrator to arrange access\"\r\n            )\r\n          };\r\n        }\r\n        try {\r\n          await sendEmail({ email, url, resetId });\r\n        } catch (error) {\r\n          return {\r\n            errors: createError(\"email\", \"could not send, new user email\")\r\n          };\r\n        }\r\n      }\r\n      try {\r\n        const employee = await Employee.findOne({ email }).exec();\r\n        return employee;\r\n      } catch (error) {\r\n        return { errors: createError(\"email\", \"signup failed, try again\") };\r\n      }\r\n    },\r\n    login: async (\r\n      _,\r\n      { email, password },\r\n      { models: { User, Employee }, req }\r\n    ) => {\r\n      let forgotPassword;\r\n      try {\r\n        // check user exists\r\n        const user = await User.findOne({ email }).exec();\r\n        if (!user) {\r\n          return { errors: createError(\"authentication\", \"invalid login\") };\r\n        }\r\n        // check user account has been confirmed\r\n        if (!user.confirmed) {\r\n          return { errors: createError(\"email\", \"confirm email first\") };\r\n        }\r\n        // check for user forgetting password\r\n        if (user.forgotPasswordLocked) {\r\n          forgotPassword = createError(\r\n            \"email\",\r\n            \"check email for reset code or try again\"\r\n          );\r\n        }\r\n        // compare passwords\r\n        const valid = await bcrypt.compare(password, user.password);\r\n        if (!valid) {\r\n          return { errors: createError(\"authentication\", \"invalid login\") };\r\n        }\r\n        // login successful\r\n        // add user id to session\r\n        req.session.userId = user._id;\r\n        await req.session.save();\r\n        // find employee details\r\n        try {\r\n          const employee = await Employee.findOne({ email }).exec();\r\n          if (forgotPassword) {\r\n            employee.errors = forgotPassword;\r\n            return employee;\r\n          }\r\n          return employee;\r\n        } catch (error) {\r\n          return {\r\n            errors: createError(\r\n              \"authorization\",\r\n              \"authenticated but not authorized, contact administrator\"\r\n            )\r\n          };\r\n        }\r\n      } catch (error) {\r\n        return { errors: createError(\"authentication\", \"invalid login\") };\r\n      }\r\n    },\r\n    createCompany: async (\r\n      _,\r\n      { companyName, schedule, groups },\r\n      { models: { Company, Employee } }\r\n    ) => {\r\n      const exists = await Company.findOne({ companyName }).exec();\r\n      if (exists) {\r\n        return createError(\"company\", \"company exists\");\r\n      }\r\n      try {\r\n        await new Company({\r\n          companyName,\r\n          schedule: \"30 8 * * Fri\",\r\n          groups: [...groups, \"manager\", \"participant\"]\r\n        }).save();\r\n        if (schedule) {\r\n          addSchedule({ companyName, Employee, schedule });\r\n          startSchedule({ companyName });\r\n        } else {\r\n          addSchedule({ companyName, Employee, schedule: \"30 8 * * Fri\" });\r\n          startSchedule({ companyName });\r\n        }\r\n      } catch (error) {\r\n        return createError(\"company\", \"invalid or missing options\");\r\n      }\r\n      return null;\r\n    },\r\n    editCompany: async (\r\n      _,\r\n      { companyName, groups, schedule },\r\n      { models: { Company, Employee } }\r\n    ) => {\r\n      const exists = await Company.findOne({ companyName }).exec();\r\n      if (!exists) {\r\n        return createError(\"company\", `company doesn't exist`);\r\n      }\r\n      try {\r\n        await Company.findOneAndUpdate(\r\n          { companyName },\r\n          { schedule, groups }\r\n        ).exec();\r\n        if (schedule) {\r\n          stopSchedule({ companyName });\r\n          destorySchedule({ companyName });\r\n          addSchedule({ companyName, Employee, schedule });\r\n          startSchedule({ companyName });\r\n        }\r\n        return null;\r\n      } catch (error) {\r\n        return createError(\"company\", \"invalid or missing options\");\r\n      }\r\n    },\r\n    removeCompany: async (_, { companyName }, { models: { Company } }) => {\r\n      const exists = await Company.findOneAndRemove({ companyName }).exec();\r\n      return exists ? null : createError(\"company\", \"company not found\");\r\n    },\r\n    createEmployee: async (_, args, { models: { Employee } }) => {\r\n      const exists = await Employee.findOne({ email: args.email }).exec();\r\n      if (exists) {\r\n        return createError(\"employee\", \"employee already exists\");\r\n      }\r\n      try {\r\n        const firstTime = true;\r\n        const _id = uuid.v4();\r\n        const mobileId = uuid.v4();\r\n        const surveyOwed = true;\r\n        await new Employee({\r\n          ...args,\r\n          firstTime,\r\n          _id,\r\n          mobileId,\r\n          surveyOwed\r\n        }).save();\r\n        return null;\r\n      } catch (error) {\r\n        return createError(\r\n          \"employee\",\r\n          `Cannot save user to database due to ${error}`\r\n        );\r\n      }\r\n    },\r\n    editEmployee: async (_, args, { models: { Employee } }) => {\r\n      const exists = await Employee.findByIdAndUpdate(args.id, {\r\n        ...args\r\n      }).exec();\r\n      if (exists) {\r\n        return null;\r\n      }\r\n      return createError(\"employee\", `Employee not found`);\r\n    },\r\n    removeEmployee: async (_, { id }, { models: { Employee, User } }) => {\r\n      const employeeExists = await Employee.findByIdAndRemove(id).exec();\r\n      if (!employeeExists) {\r\n        return createError(\"employee\", `employee not found`);\r\n      }\r\n      const userExists = await User.findByIdAndRemove(id).exec();\r\n      if (!userExists) {\r\n        return createError(\r\n          \"employee\",\r\n          `employee removed, wasn't registered user`\r\n        );\r\n      }\r\n      return null;\r\n    },\r\n    createSurvey: async (_, args, { models: { Survey } }) => {\r\n      const exists = await Survey.findOneAndUpdate(\r\n        {\r\n          surveyName: args.surveyName,\r\n          companyName: args.companyName\r\n        },\r\n        { ...args }\r\n      ).exec();\r\n      if (exists) {\r\n        return createError(\"survey\", \"survey saved successfully\");\r\n      }\r\n      const added = await new Survey({ ...args }).save();\r\n      if (added) {\r\n        return createError(\"survey\", \"survey saved successfully\");\r\n      }\r\n      return createError(\"survey\", \"check survey fields\");\r\n    },\r\n    editSurvey: async (_, args, { models: { Survey } }) => {\r\n      const query = {\r\n        surveyName: args.surveyName,\r\n        companyName: args.companyName\r\n      };\r\n      const exists = await Survey.findOneAndUpdate(query, { ...args }).exec();\r\n      if (exists) {\r\n        return null;\r\n      }\r\n      return createError(\"survey\", `Survey not found`);\r\n    },\r\n    removeSurvey: async (\r\n      _,\r\n      { surveyName, companyName },\r\n      { models: { Survey } }\r\n    ) => {\r\n      const existed = await Survey.findOneAndRemove({\r\n        surveyName,\r\n        companyName\r\n      }).exec();\r\n      if (existed) {\r\n        return null;\r\n      }\r\n      return createError(\"survey\", `Survey not found`);\r\n    },\r\n    assignSurvey: async (\r\n      _,\r\n      { surveyName, employees },\r\n      { models: { Employee } }\r\n    ) => {\r\n      const surveyOwed = true;\r\n      const errors = [];\r\n      employees.forEach(async ({ _id, mobile, companyName, firstTime }) => {\r\n        const mobileId = uuid.v4();\r\n        const linkUrl = `${LINK_URL}/id/${mobileId}`;\r\n        const employeeError = await Employee.findByIdAndUpdate(_id, {\r\n          surveyName,\r\n          surveyOwed,\r\n          mobileId\r\n        }).exec();\r\n        if (employeeError) {\r\n          errors.push({\r\n            path: \"survey-assignment\",\r\n            message: `${employeeError}`\r\n          });\r\n        }\r\n\r\n        await sendSMS(mobile, linkUrl, companyName, firstTime)\r\n          .catch(err =>\r\n            errors.push({ path: \"survey-assignment\", message: `${err}` })\r\n          )\r\n          .then(() => null);\r\n      });\r\n      return errors.length > 0 ? errors : null;\r\n    },\r\n    sendTestMessage: async (_, { mobile, firstTime }) => {\r\n      const companyName = \"testco\";\r\n\r\n      return sendSMS(mobile, LINK_URL, companyName, firstTime)\r\n        .then(res => JSON.stringify(res))\r\n        .catch(err => JSON.stringify(err));\r\n    },\r\n    sendReminder: async (\r\n      _,\r\n      { mobile, firstTime, companyName },\r\n      { models: { Employee } }\r\n    ) => {\r\n      const employee = await Employee.findOne({ mobile, companyName })\r\n      if (!employee) { return createError(\"sms\", `sending failed, no mobile number available`) }\r\n      const linkUrl = `${LINK_URL}/id/${employee.mobileId}`;\r\n\r\n      sendSMS(mobile, linkUrl, companyName, firstTime)\r\n        .then(res => {\r\n          JSON.stringify(res);\r\n          const lastReminder = String(new Date().getTime());\r\n          Employee.findOneAndUpdate({ mobile }, { lastReminder });\r\n        })\r\n        .catch(err => createError(\"sms\", `sending failed, reciever ${err}`));\r\n    },\r\n    sendReminders: async (\r\n      _,\r\n      { companyName, limit },\r\n      { models: { Employee } }\r\n    ) => {\r\n      const employees = await Employee.find({\r\n        companyName,\r\n        surveyOwed: true\r\n      }).exec();\r\n      const responses = employees.reduce(async (arr, u) => {\r\n        if (Number(u.lastReminder) < Number(limit)) {\r\n          const lastReminder = String(new Date().getTime());\r\n          await Employee.findOneAndUpdate(\r\n            { mobile: u.mobile },\r\n            { lastReminder }\r\n          );\r\n          const linkUrl = `${LINK_URL}/id/${u.mobileId}`;\r\n          const response = await sendSMS(\r\n            u.mobile,\r\n            linkUrl,\r\n            u.companyName,\r\n            u.firstTime\r\n          );\r\n          return [...arr, JSON.stringify(response)];\r\n        }\r\n        return arr;\r\n      }, []);\r\n      return responses;\r\n    },\r\n    createResult: async (_, args, { models: { Result, Employee } }) => {\r\n      const date = String(new Date().getTime());\r\n      const submitted = await new Result({ date, ...args }).save();\r\n      if (submitted) {\r\n        const mobileId = uuid.v4();\r\n        if (args.surveyName === \"participant\") {\r\n          await Employee.findOneAndUpdate(\r\n            { email: args.email },\r\n            { mobileId, surveyOwed: false, firstTime: false }\r\n          ).exec();\r\n        }\r\n        // const participants = await Employee.find({manager: args.email}).exec()\r\n        if (args.surveyName === \"management\") {\r\n          await Employee.findOneAndUpdate(\r\n            { email: args.email },\r\n            { surveyOwed: true, firstTime: false }\r\n          ).exec();\r\n        }\r\n        return null;\r\n      }\r\n      return createError(\r\n        \"result\",\r\n        `Cannot submit survey, check answers and try again`\r\n      );\r\n    },\r\n    passwordReset: async (_, { resetId, password }, { models: { User } }) => {\r\n      const saltRounds = 10;\r\n      const hashedPassword = await bcrypt.hashSync(password, saltRounds);\r\n      const updated = await User.findOneAndUpdate(\r\n        { resetId },\r\n        {\r\n          password: hashedPassword,\r\n          forgotPasswordLocked: false,\r\n          confirmed: true,\r\n          resetId: \"\"\r\n        }\r\n      ).exec();\r\n      if (updated) {\r\n        return null;\r\n      }\r\n      return createError(\"password\", \"email does not exist\");\r\n    },\r\n    forgotPassword: async (_, { email }, { models: { User }, url }) => {\r\n      const resetId = uuid.v4();\r\n      const updated = await User.findOneAndUpdate(\r\n        { email },\r\n        {\r\n          resetId,\r\n          forgotPasswordLocked: true\r\n        }\r\n      ).exec();\r\n      if (!updated) {\r\n        return createError(\"email\", \"email not found\");\r\n      }\r\n      const sentEmail = await sendEmail({ email, url, resetId });\r\n      if (!sentEmail) {\r\n        return createError(\"email\", \"forgot password send email failed\");\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n};\r\n"]}