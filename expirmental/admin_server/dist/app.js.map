{"version":3,"sources":["../src/app.js"],"names":["MONGO_URI","process","env","MongoDBStoreWithSession","session","mongoose","Promise","global","options","reconnectTries","Number","MAX_VALUE","reconnectInterval","connect","connection","once","console","log","on","error","store","mongooseConnection","ttl","app","disable","use","bodyParser","urlencoded","extended","origin","methods","preflightContinue","optionsSuccessStatus","filter","shouldCompress","req","res","headers","compression","express","static","path","join","__dirname","get","sendFile","server","ApolloServer","typeDefs","resolvers","context","models","Employee","Survey","Company","Result","User","File","url","genid","uuid","v4","name","secret","resave","saveUninitialized","cookie","httpOnly","secure","NODE_ENV","maxAge","applyMiddleware"],"mappings":"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","file":"app.js","sourcesContent":["import { ApolloServer } from 'apollo-server-express';\nimport compression from 'compression';\nimport express from 'express';\nimport bodyParser from 'body-parser';\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nimport favicon from 'serve-favicon';\nimport path from 'path';\nimport session from 'express-session';\nimport uuid from 'uuid';\nimport { redirectToHTTPS } from 'express-http-to-https';\nimport MongoStore from 'connect-mongo';\nimport { Employee, Survey, Company, Result, User, File } from './models';\nimport resolvers from './resolvers';\nimport typeDefs from './schema';\nconst { MONGO_URI } = process.env;\n\nconst MongoDBStoreWithSession = MongoStore(session);\nmongoose.Promise = global.Promise;\nconst options = {\n  reconnectTries: Number.MAX_VALUE, // Never stop trying to reconnect\n  reconnectInterval: 500, // Reconnect every 500ms\n};\nmongoose.connect(\n  MONGO_URI,\n  options\n);\n\nmongoose.connection\n  .once('open', () => console.log('Connected to MongoLab instance')) // eslint-disable-line no-console\n  .on('error', error => console.log('Error connecting to MongoLab:', error)); // eslint-disable-line no-console\n\nconst store = new MongoDBStoreWithSession({\n  mongooseConnection: mongoose.connection,\n  ttl: 7 * 24 * 60 * 60, // 7 days\n});\n\nconst app = express();\n\napp.disable('x-powered-by');\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(\n  cors({\n    origin: '*',\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n    preflightContinue: false,\n    optionsSuccessStatus: 204,\n  })\n);\n\napp.use(compression({ filter: shouldCompress }));\n\nfunction shouldCompress(req, res) {\n  if (req.headers['x-no-compression']) {\n    // don't compress responses with this request header\n    return false;\n  }\n\n  // fallback to standard filter function\n  return compression.filter(req, res);\n}\n\napp.use(express.static(path.join(__dirname, '../build')));\napp.use(favicon(path.join(__dirname, 'favicon.ico')));\napp.use(redirectToHTTPS([/localhost:(\\d{4})/], [/\\/insecure/]));\napp.get('/*', function(req, res) {\n  res.sendFile(path.join(__dirname, '../build', 'index.html'));\n});\n\nconst server = new ApolloServer({\n  typeDefs,\n  resolvers,\n  context: async ({ req }) => {\n    return {\n      models: {\n        Employee,\n        Survey,\n        Company,\n        Result,\n        User,\n        File,\n      },\n      req,\n      session: req.session,\n      url: req.url,\n    };\n  },\n});\n\napp.use(\n  session({\n    genid: () => {\n      return uuid.v4();\n    },\n    store,\n    name: 'qid',\n    secret: 'SESSION_SECRET',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: false,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 1000 * 60 * 60 * 24 * 7, // 7 days\n    },\n  })\n);\n\nserver.applyMiddleware({ app });\n\nexport default app;\n"]}